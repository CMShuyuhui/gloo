### v1.4.0-beta5

**Dependency Bumps**

- helm/helm has been upgraded to v3.1.2.

**New Features**

- Expose `perConnectionBufferLimitBytes` as a new listener option. If left unset, Envoy will continue to use the default `1MiB`. (https://github.com/solo-io/gloo/issues/2835)
- Gloo's validation webhook now validates inja compilation syntax before accepting/rejecting virtual services that use transformations. Note that strict validation is still disabled by default, and must be enabled in the Gloo settings. Users can now rely more on `kubectl apply --server-dry-run` against live clusters to properly validate whether config is valid before attempting to apply them to their cluster. (https://github.com/solo-io/gloo/issues/2114)

**Fixes**

- Fix an issue where big regexes were rejected, by allowing configuration of the max regex size. (https://github.com/solo-io/gloo/issues/2805)
- Fix upstream status to report when an upstream points to a service that does not exist. (https://github.com/solo-io/gloo/issues/2660)

### v1.3.23

**Dependency Bumps**

- helm/helm has been upgraded to v3.1.2.

### v1.3.22

**Fixes**

- Fix an issue where big regexes were rejected, by allowing configuration of the max regex size. (https://github.com/solo-io/gloo/issues/2805)

### v1.3.21

**Helm Changes**

- Fix documented helm values for gateway proxy resources. Allow ingress resources to be set, and allow access logger resources and custom env to be set, as documented. (https://github.com/solo-io/gloo/issues/2758)

**Fixes**

- Some users saw commands such as glooctl check or glooctl proxy dump fail due to harsh timeout restrictions on the port-forward glooctl does under the covers. This results in "Connection Refused" errors that could have been avoided. This PR updates the port forward timeouts from 3 to 30 seconds to allow these commands more time to finish. (https://github.com/solo-io/gloo/issues/2771)
- Fix race condition with proxy status and proxy status propagation (e.g., virtual service status) when multiple resources are applied at the same time by copying over the previous proxy status (rather than marking as pending for re-processing) when it changes from the gateway's point of view but hashes to the same thing (i.e., unchanged from gloo's point of view). (https://github.com/solo-io/gloo/issues/2714)

### v1.4.0-beta4

**Helm Changes**

- Fix documented helm values for gateway proxy resources. Allow ingress resources to be set, and allow access logger resources and custom env to be set, as documented. (https://github.com/solo-io/gloo/issues/2758)

**Fixes**

- Some users saw commands such as glooctl check or glooctl proxy dump fail due to harsh timeout restrictions on the port-forward glooctl does under the covers. This results in "Connection Refused" errors that could have been avoided. This PR updates the port forward timeouts from 3 to 30 seconds to allow these commands more time to finish. (https://github.com/solo-io/gloo/issues/2771)
- Fix race condition with proxy status and proxy status propagation (e.g., virtual service status) when multiple resources are applied at the same time by copying over the previous proxy status (rather than marking as pending for re-processing) when it changes from the gateway's point of view but hashes to the same thing (i.e., unchanged from gloo's point of view). (https://github.com/solo-io/gloo/issues/2714)

### v1.3.20

**Fixes**

- Allow ALPN on the upstream. Istio upstreams seem to require ALPN set, so this fixes the integration with Istio 1.5. (https://github.com/solo-io/gloo/issues/2703)
- With proxy garbage collection enabled (enabled by default via `disableProxyGarbageCollection`=`false`), Gloo used to clear the extauth and ratelimit snapshots from the XDS cache, resulting in null configurations temporarily in the extauth and ratelimit services. This caused blips of invalid 403/429 responses. To fix this, Gloo now detects any valid `TranslatorSyncerExtension`'s Envoy Node ID keys through its `Sync()` function, so Gloo doesn't garbage collect these snapshots anymore. (https://github.com/solo-io/gloo/issues/2721)

### v1.4.0-beta3

**Fixes**

- With proxy garbage collection enabled (enabled by default via `disableProxyGarbageCollection`=`false`), Gloo used to clear the extauth and ratelimit snapshots from the XDS cache, resulting in null configurations temporarily in the extauth and ratelimit services. This caused blips of invalid 403/429 responses. To fix this, Gloo now detects any valid `TranslatorSyncerExtension`'s Envoy Node ID keys through its `Sync()` function, so Gloo doesn't garbage collect these snapshots anymore. (https://github.com/solo-io/gloo/issues/2721)

### v1.4.0-beta2

**Dependency Bumps**

- k8s.io/api has been upgraded to kubernetes-1.17.1.
- k8s.io/client-go has been upgraded to kubernetes-1.17.1.
- k8s.io/kubectl has been upgraded to kubernetes-1.17.1.
- k8s.io/apimachinery has been upgraded to kubernetes-1.17.1.
- k8s.io/apiextensions-apiserver has been upgraded to kubernetes-1.17.1.
- k8s.io/apiserver has been upgraded to kubernetes-1.17.1.

**Fixes**

- In active (event-heavy) kubernetes environments, if events come in too quickly, they can lead to memory usage growing without bound in Gloo and Discovery. Fix the leak by de-duplicating and processing events immediately. (https://github.com/solo-io/gloo/issues/2361)
- The helm chart value `gatewayProxies.$gatewayProxy.gatewaySettings.ipv4Only` changes the Gateway spec's bindAddress to '0.0.0.0' instead of '::' for both the non-ssl and ssl Gateways. (https://github.com/solo-io/gloo/issues/2425)

### v1.3.19

**Dependency Bumps**

- k8s.io/api has been upgraded to kubernetes-1.17.1.
- k8s.io/client-go has been upgraded to kubernetes-1.17.1.
- k8s.io/kubectl has been upgraded to kubernetes-1.17.1.
- k8s.io/apimachinery has been upgraded to kubernetes-1.17.1.
- k8s.io/apiextensions-apiserver has been upgraded to kubernetes-1.17.1.
- k8s.io/apiserver has been upgraded to kubernetes-1.17.1.

**Fixes**

- In active (event-heavy) kubernetes environments, if events come in too quickly, they can lead to memory usage growing without bound in Gloo and Discovery. Fix the leak by de-duplicating and processing events immediately. (https://github.com/solo-io/gloo/issues/2361)
- The helm chart value `gatewayProxies.$gatewayProxy.gatewaySettings.ipv4Only` changes the Gateway spec's bindAddress to '0.0.0.0' instead of '::' for both the non-ssl and ssl Gateways. (https://github.com/solo-io/gloo/issues/2425)

### v1.3.18

**Dependency Bumps**

- envoy-gloo/solo-io has been upgraded to v1.4.2.

**Helm Changes**

- Allow users to override the Service type as an alternative to Load Balancer for Ingress Proxy and Knative (https://github.com/solo-io/gloo/pull/2683)

**Fixes**

- Updated envoy-gloo based, which includes fixes to support auto host rewrite on EDS clusters. (i.e., fixing auto host rewrite for gloo with consul) (https://github.com/solo-io/gloo/issues/2552)
- Fix an issue with consul EDS where error were sent to a closed channel. (https://github.com/solo-io/gloo/issues/2736)

### v1.4.0-beta1

**Dependency Bumps**

- envoy-gloo/solo-io has been upgraded to v1.4.2.

**Helm Changes**

- Allow users to override the Service type as an alternative to Load Balancer for Ingress Proxy and Knative (https://github.com/solo-io/gloo/pull/2683)

**New Features**

- Allow ALPN on the upstream. Istio upstreams seem to require ALPN set. (https://github.com/solo-io/gloo/issues/2703)
- Updated envoy to envoy-gloo based on upstream envoy (b5a3405b2725e979a93e7410fce7c57a0c66d8db), which includes auto host rewrite on EDS clusters. (https://github.com/solo-io/gloo/issues/2552)

**Fixes**

- Fix `glooctl add route` so that the --dry-run flag does not create a route table or virtual service. (https://github.com/solo-io/gloo/issues/2715)
- Fix an issue with consul EDS where error were sent to a closed channel. (https://github.com/solo-io/gloo/issues/2736)
- `glooctl uninstall --all` and `glooctl uninstall --delete-crds` will now properly delete CRDs for enterprise Gloo. (https://github.com/solo-io/gloo/issues/2219)

### v1.3.17

**Helm Changes**

- Added the option to have annotation specified for ingress proxy (https://github.com/solo-io/gloo/issues/2685)

**Fixes**

- In `glooctl` 1.3.16, there was a regression with the `glooctl add route` command that prevented it from working if the `--name` flag was omitted, which was common in our documented tutorials. Pre 1.3.16, `glooctl add route` would search all namespaces for a virtual service with * for domain (all domains) to add the route to. This would require cluster-scoped permissions on the virtual service by the user.
This change defaults `glooctl add route` to use a namespaced virtual service client, which requires fewer permissions, but also only searches a single namespace for virtual services to add the route to, before creating a new virtual service. `glooctl add route` now supports the `cluster-scoped-vs-client` boolean flag, which supports the original, pre 1.3.16 behavior. (https://github.com/solo-io/gloo/issues/2708)

### v1.3.16

**Fixes**

- Change the how Gloo handles an unset endpoint warming timeout to make upgrades safer by default. Previously, by default Gloo wouldn't wait for endpoints to warm before propagating config to Envoy. With this change, Gloo will wait up to five minutes (configurable) for discovery and EDS to warm before propagating config to Envoy, and panic if this doesn't happen within the warming timeout. This helps prevent unnecessary downtime in upgrade scenarios. If `EndpointsWarmingTimeout` is set to zero on the Gloo settings, the old default behavior is used (Gloo doesn't wait for EDS or discovery to be ready before propagating config). (https://github.com/solo-io/gloo/issues/2673)
- `glooctl` commands such as `glooctl get vs` now work without cluster-scoped rbac permissions. (https://github.com/solo-io/gloo/issues/2375)
- `glooctl uninstall --all` will now properly delete ClusterRoles and ClusterRoleBindings associated with prometheus. (https://github.com/solo-io/gloo/issues/2419)
- `glooctl check` now reports Gloo custom resource status warnings. (https://github.com/solo-io/gloo/issues/2659)
- In active (event-heavy) kubernetes environments, if events come in too quickly, they can lead to memory  usage growing without bound in Gloo and Discovery. Mitigate and slow the leak by de-duplicating events received when possible. (https://github.com/solo-io/gloo/issues/2361)
- Propagate all warnings and errors from delegate route tables to the top level Virtual Service status field. For example, if we have a long chain of delegated route tables like vs1 -> rt1 -> rt2 -> rt3, and rt3 has a warning, that warning will show up on the parent route table rt2 and the top level Virtual Service vs1, but not any intermediary route tables like rt1. (https://github.com/solo-io/gloo/issues/2628)

### v1.3.15

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.13.3.

**Helm Changes**

- Allow un-setting replicas, to support flux usage of deployment with the HPA. (https://github.com/solo-io/gloo/issues/2650)
- Add quote to envoyExtgraArgs in the gatewayProxy deployment. This allows using values that  start with %. This is useful for stackdriver log ingestion (https://github.com/solo-io/gloo/issues/2647)

**Fixes**

- With `disableProxyCollection: false` (the default), extauth had a race condition where it could recevie nil config. This could result in 403s that shouldn't happen. This change pulls in a fix from solo-kit where GetStatusKeys was returning a slice with an empty string, which caused an empty snapshot to be added with an empty version. Fixing this issue means that this nil config should no longer occur. (https://github.com/solo-io/gloo/issues/2645)
- Check auth configs with glooctl check. (https://github.com/solo-io/gloo/issues/2036)
- If a Virtual Service refers to a missing Auth Config, this error will now show up in the Virtual Service and the Proxy statuses as errors. (https://github.com/solo-io/gloo/issues/2017)
- Shrink the footprint of discovery significantly by removing upstream creation based on pod labels, which was originally used for (and no longer needed by) subset routing. This can drastically reduce the number of upstreams created, which in turn will reduce the size of upstreams stored in Gloo in-memory, reducing Gloo's memory footprint. (https://github.com/solo-io/gloo/issues/2619)

### v1.3.14

**Helm Changes**

- Add a helm chart value `gatewayProxies.$gatewayProxy.gatewaySettings.ipv4Only`. This changes the Gateway spec's bindAddress to '0.0.0.0' instead of '::', which is ipv6 by default. Use this helm value if your network allows ipv4 addresses only. (https://github.com/solo-io/gloo/issues/2425)

**Fixes**

- Fix an issue with CORS and regex. (https://github.com/solo-io/gloo/issues/2614)

### v1.2.24

**Fixes**

- Fix an issue with CORS and regex. (https://github.com/solo-io/gloo/issues/2614)

### v1.3.13

**Helm Changes**

- List HTTPS port first to avoid failing health check on AWS (https://github.com/solo-io/gloo/issues/2571)

**Fixes**

- Fix issue where Consul endpoints were given a similar name, due to them having the same ID. (https://github.com/solo-io/gloo/issues/2567)
- When not empty, only consul service instances that match all of the tags will be selected for this upstream. (https://github.com/solo-io/gloo/issues/2567)
- Fix Gloo linker compatibility in go 1.14; now we properly link the client version in `glooctl` when building on go 1.14 (this just fixes our homebrew formula, as the shipped binary had always been built with go 1.13). (https://github.com/solo-io/gloo/issues/2532)
- Fix issue where two ssl certs with the same name but different namespaces were merged. (https://github.com/solo-io/gloo/issues/2605)
- `glooctl check` now additionally checks that gloo and envoy are connected and that the gloo config is not rejected by envoy. (https://github.com/solo-io/gloo/issues/1627)
- Fix upgrade from Gloo 1.2.22+ to 1.3.x. The `alwaysSortRouteTableRoutes` setting was added to the Gloo `Settings` API in the 1.2.x stable branch to fix a regression from desired behavior, while enabling users that depended on the wrong behavior to enable it. This PR adds and ignores `alwaysSortRouteTableRoutes` to Gloo 1.3.x so upgrades from Gloo 1.2.x settings can be parsed by Gloo 1.3.x. (https://github.com/solo-io/gloo/issues/2554)

### v1.2.23

**Dependency Bumps**

- solo-io/envoy-gloo has been upgraded to 1.2.0.
- solo-io/envoy-gloo has been upgraded to v0.1.20.

**Fixes**

- Use envoy's `SafeRegex` feature to have more deterministic regex performance. (https://github.com/solo-io/gloo/issues/2395)

### v1.3.12

**Fixes**

- `glooctl get vs` no longer panics when certain sections are not present in the settings. (https://github.com/solo-io/gloo/issues/2550)

### v1.3.11

**Dependency Bumps**

- solo-io/envoy-gloo has been upgraded to 1.3.0.

**Helm Changes**

- Can add extra custom env vars to gloo, discovery, gateway, gateway-proxy, ingress, and ingress-proxy deployments (https://github.com/solo-io/gloo/issues/2435)
- Allow for adding custom options for the default HTTP and HTTPS gateways (https://github.com/solo-io/gloo/issues/2535)

### v1.2.22

**Fixes**

- Fix noisy logging on duplicate upgrade websocket config when using Gloo with SSL & SNI. (https://github.com/solo-io/gloo/issues/2500)
- Gloo currently sorts routes that originate from a single route table. This is not intended behavior. Gloo should sort routes only when a route delegates to multiple route tables, because in these cases we want to avoid short-circuiting (e.g. having `/foo` come before `/foo/bar`). This change fixes the behavior and adds a new `alwaysSortRouteTableRoutes` setting for users who might be depending on the current behavior. If this flag is set to `true` (default is `false`), it will force Gloo to sort the routes even when they come from a single route table. (https://github.com/solo-io/gloo/issues/2529)

### v1.3.10

**New Features**

- Make ALPN configurable, so that you can configure gloo to only allow http 1.1 over TLS. (https://github.com/solo-io/gloo/issues/2525)

**Fixes**

- When the gateway-proxy is in an unhealthy state, it will now display a clearer and more helpful "STATUS" in `glooctl get vs`. (https://github.com/solo-io/gloo/issues/2228)
- Fix noisy logging on duplicate upgrade websocket config when using Gloo with SSL & SNI. (https://github.com/solo-io/gloo/issues/2500)

### v1.2.21

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.11.18.

**Fixes**

- Fix reconciler and resource status reporter to retry more than once on resource version conflict errors. (https://github.com/solo-io/gloo/issues/2498)

### v1.3.9

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.14.1.

### v1.3.8

**Helm Changes**

- Added a new extraProxyVolumeMountHelper Helm value that allows users to define additional volume mounts on the gateway proxy container. (https://github.com/solo-io/gloo/issues/2469)
- Introducing the new `global.glooMtls.sds` and `global.glooMtls.envoy` Helm values to determine which images will be rendered in the gloo mTLS sds and envoy sidecars. An example of a helm override file that enables mTLS authentication is: 
``` global:
  glooMtls:
    enabled: true
    sds:
      image:
        tag: test
    envoy:
      image:
        tag: test
```
(https://github.com/solo-io/gloo/issues/2134)

### v1.2.20

**Fixes**

- When a Gateway has an empty `httpGateway.virtualServiceNamespaces` list, it will now search for virtual services in all the namespaces watched by Gloo. Previously the behavior was to include only virtual services in the same namespace as the gateway, which has proven unintuitive to users. (https://github.com/solo-io/gloo/issues/2156)

### v1.3.7

**Helm Changes**

- Allow for gateway-proxy to have a custom service name (https://github.com/solo-io/gloo/issues/2446)

**New Features**

- Support Consul service registry integration when Consul service endpoints are hostnames not IPs. (https://github.com/solo-io/gloo/issues/2424)

**Fixes**

- When a Gateway has an empty `httpGateway.virtualServiceNamespaces` list, it will now search for virtual services in all the namespaces watched by Gloo. Previously the behavior was to include only virtual services in the same namespace as the gateway, which has proven unintuitive to users. (https://github.com/solo-io/gloo/issues/2156)

### v1.3.6

**Dependency Bumps**

- solo-io/wasme has been upgraded to v0.0.13-rc1.
- solo-io/solo-kit has been upgraded to v0.13.2.

**Helm Changes**

- We are introducing a new Helm value `global.glooMtls.enabled` to enable mTLS between Gloo and Envoy (https://github.com/solo-io/gloo/issues/2134). An example of a helm override file that enables MTLS authentication is: 
``` global:
  glooMtls:
    enabled: true
``` 

**New Features**

- Allow enabling mTLS authentication between the Gloo control plane and Envoy instances. Since the Envoy configuration can contain secret data, plaintext communication between Gloo and Envoy is too insecure in certain scenarios (e.g. if your setup has the Gloo control plane and Envoy instances running in separate clusters). Turning on mTLS will encrypt the xDS communication between Gloo and Envoy. (https://github.com/solo-io/gloo/issues/2134)

**Fixes**

- Fix issue with multiple wasm filters getting the same config. (https://github.com/solo-io/gloo/issues/2456)
- Fix Helm charts for knative installs so version specific templates only match the provided version (https://github.com/solo-io/gloo/issues/2448)
- Fixes listener config sent to envoy to be idempotent, so that config no longer reloads as "different" when there are no changes. This resolves the issue of the "Average Request Time" graph in grafana showing gaps in the downstream data, among other potential issues. (https://github.com/solo-io/gloo/issues/2185)
- Pin versions of base docker images for Gloo containers (https://github.com/solo-io/gloo/issues/2406)

### v1.2.19

**Fixes**

- Fixes listener config sent to envoy to be idempotent, so that config no longer reloads as "different" when there are no changes. This resolves the issue of the "Average Request Time" graph in grafana showing gaps in the downstream data, among other potential issues. (https://github.com/solo-io/gloo/issues/2185)

### v1.2.18

**Fixes**

- Expose the `disableKubernetesDestinations` settings field as a Helm chart value, which if enabled in a Gloo deployment monitoring a large number of kubernetes services, can drastically reduce Gloo memory usage. (https://github.com/solo-io/gloo/issues/2299)

### v1.3.5

**New Features**

- Currently, when a delegated route defines a `RouteTableSelector` that matches multiple route tables, Gloo has no way of determining the order in which to process the route tables; in these cases, to avoid short-circuiting routes (e.g. having a route with a `/foo` path prefix matcher before one with `/foo/bar`), Gloo currently automatically sorts the routes by descending specificity of their matchers. While this prevents short-circuiting errors, it can lead to undesired behavior in cases where the user wants complete control over the final ordering of their routes. To prevent this, we are adding an optional `weight` field to the `RouteTable` resource. Gloo will now inspect this field to determine the order in which route tables are to be evaluated when a `selector` matches multiple ones. This will give the user control over the order in which the routes will appear on the final `Proxy` resource. The field is optional; if no value is specified, the weight defaults to `0` (zero). Gloo will process the route tables matched by a selector in ascending order by weight and collect the routes of each route table in the order they are defined. If multiple route tables define the same weight, Gloo will sort the routes which belong to those tables to avoid short-circuiting. In this scenario, Gloo will also alert the user by adding a warning to the status of the parent resource (the one that specifies the `RouteTableSelector`). (https://github.com/solo-io/gloo/issues/2233)

**Fixes**

- Use envoy's SafeRegex in method matching - old style regex match is now deprecated in envoy. (https://github.com/solo-io/gloo/issues/2395)

### v1.3.4

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.13.1.
- solo-io/envoy-gloo has been upgraded to v0.1.20.

**New Features**

- Add `name` field to Route object for convenience of naming routes. (https://github.com/solo-io/gloo/issues/2234)
- Expose the `disableProxyGarbageCollection` settings field as a Helm chart value. (https://github.com/solo-io/gloo/issues/2323)
- Gloo now supports enabling the Envoy gzip compression filter by configuring `spec.httpGateway.options.gzip` of the desired Gateway. (https://github.com/solo-io/gloo/issues/2315)
- Use envoy's SafeRegex feature to have more deterministic regex performance. (https://github.com/solo-io/gloo/issues/2395)

**Fixes**

- Fix bug which causes Gloo's EDS cache from being flushed when upstreams are updated, leading to temporary 503s from the proxy. (https://github.com/solo-io/gloo/issues/2356)
- Ensure Knative Services are exposed on the internal Knative proxy. currently this assumption is made but not documented by Knative's visibility setting: [knative/serving#6642](https://github.com/knative/serving/issues/6642). In order for Knative Eventing to work with Gloo, Gloo must load cluster-local services on the internal proxy as well. (https://github.com/solo-io/gloo/issues/2336)
- Fix validation setting to honor always accept. (https://github.com/solo-io/gloo/issues/2280)
- Ignore opaque metadata when hashing, which can make Gloo & Gateway interactions less noisy and reduce unnecessary resyncs. (https://github.com/solo-io/gloo/issues/2331)
- Fix leaking goroutine in validation. (https://github.com/solo-io/gloo/issues/2313)

### v1.2.17

**Fixes**

- Fix bug which causes Gloo's EDS cache from being flushed when upstreams are updated, leading to temporary 503s from the proxy. (https://github.com/solo-io/gloo/issues/2356)
- Fix validation setting to honor always accept. (https://github.com/solo-io/gloo/issues/2280)
- Ignore opaque metadata when hashing, which can make Gloo & Gateway interactions less noisy and reduce unnecessary resyncs. (https://github.com/solo-io/gloo/issues/2331)
- Fix leaking goroutine in validation. (https://github.com/solo-io/gloo/issues/2313)

### v1.3.3

**New Features**

- Expose the `disableKubernetesDestinations` settings field as a Helm chart value. (https://github.com/solo-io/gloo/issues/2299)

**Fixes**

- Fix cert-gen job for clusters using non-default domain suffix. (https://github.com/solo-io/gloo/issues/2288)
- Fix logic to determine whether we are on the default branch. (https://github.com/solo-io/gloo/issues/2220)
- Fix `glooctl install` command when `-f` flag is omitted to no longer error erroneously. (https://github.com/solo-io/gloo/issues/508)
- Remove unnecessary `pre-upgrade` Helm hooks to avoid failing on upgrades. (https://github.com/solo-io/gloo/issues/2212)
- Remove occurrences of deprecated hash functions. (https://github.com/solo-io/gloo/issues/2275)
- Remove unnecessary unmarshalling in `ConfigMap` converter. (https://github.com/solo-io/gloo/issues/2277)
- Remove unnecessary `post-upgrade` Helm hooks. (https://github.com/solo-io/gloo/issues/2212)

### v1.2.16

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.11.17.

**New Features**

- Generate hash functions to improve CPU performance (https://github.com/solo-io/gloo/issues/1711)

**Fixes**

- Allow updating settings and default gateway resources when upgrading via Helm. (https://github.com/solo-io/gloo/issues/2317)
- Settings and Gateway resources currently get automatically created when the `gloo` and `gateway` pods (respectively) start up. This creates a race condition with our installation that we currently solve by creating our default Settings and Gateways as Helm Hook resources, which means that they are not managed as a part of the Helm release lifecycle. With this change removes the automatic generation feature. Note that the default Settings and Gateway resources in the Helm chart are still marked as Helm hooks. (https://github.com/solo-io/gloo/issues/1828)
- Remove unnecessary `pre-upgrade` Helm hooks to avoid failing on upgrades. (https://github.com/solo-io/gloo/issues/2212)
- Remove occurrences of deprecated hash functions. (https://github.com/solo-io/gloo/issues/2275)
- Remove unnecessary unmarshalling in `ConfigMap` converter. (https://github.com/solo-io/gloo/issues/2277)
- Remove unnecessary `post-upgrade` Helm hooks. (https://github.com/solo-io/gloo/issues/2212)

### v1.3.2

Downgrading this to a pre-release due to the following regressions:
- [`glooctl install` is broken](https://github.com/solo-io/gloo/issues/508)
- [`glooctl` formulas are not updated with release](https://github.com/solo-io/gloo/issues/2220)

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.13.1.

**New Features**

- Add `glooctl ui` command to open Gloo UI from the command line. (https://github.com/solo-io/gloo/issues/1706)
- Update the Delegation API to support delegating routing decisions to multiple `RouteTables`. `RouteTables` to delegate to can be selected by either namespaces, labels, or both, using the new `RouteTableSelector` field. The routes of all matching `RouteTables` will be merged and the resulting route set will be sorted by descending specificity of the matchers on each route, e.g. matchers with longer prefixes will appear first. This feature is meant to replace the __virtual service merging__ feature that we deprecated with the stable v1 release of Gloo. __Virtual service merging__ allowed users to define multiple `VirtualServices` for the same domain, which Gloo would then merge into a single `VirtualHost` on the `Proxy` resource. Although useful to many users, this feature could lead to confusion: the API is not self-documenting with respect to the merging behavior and multiple users could inadvertently step on each other's toes when defining routes for the same domain. As of this release, __virtual service merging__ is not supported anymore; defining two virtual services with overlapping domain sets **will result in an error**. To be able to define the routes for a given domain on different resources, users can now use the Delegation API. With the new `RouteTableSelector` attribute, the Delegation API now enables the same use cases as __virtual service merging__ and has the advantage of surfacing the fact that multiple resources define routes for the same domains to the API. To give a simple example, a Gloo administrator can define a `VirtualService` with a single route that delegates all requests for a domain to any `RouteTables` that have the `domain: example.com` label (namespaces to search can be configured as well); this will allow users to add routes for that domain by creating their own `RouteTables` (with a `domain: example.com` label) without having to request updates to the parent `VirtualService`. (https://github.com/solo-io/gloo/issues/2054)

**Fixes**

- fix whitespace issue in helm chart (https://github.com/solo-io/gloo/issues/2159)
- fix `glooctl install ingress/knative` to nest helm overrides under "gloo" when a GlooE chart is passed with `-f` flag (https://github.com/solo-io/gloo/issues/1999)
- fix `glooctl install gateway enterprise` to stop nesting helm overrides under "gloo" when a Gloo open-source chart is passed with the `-f` flag (https://github.com/solo-io/gloo/issues/2145)
- Fix error (and repetitive logging) when Gateway Notification Channel is closed. This issue can happen when network communication between tthe Gloo and Gateway pods is interrupted. (https://github.com/solo-io/gloo/issues/2070)
- Introduce a feature flag in the Settings CRD named disableProxyGarbageCollection, located under the 'gloo' options. Set this option to determine the state of the envoy configuration when a virtual service is deleted, resulting in a proxy with no configured routes. Set to true if you wish to keep envoy serving the routes from the latest valid configuration. Set to false if you wish to reset the envoy configuration to a clean slate with no routes. disableProxyGarbageCollection defaults to 'false'. (https://github.com/solo-io/gloo/issues/1245)

### v1.2.15

**Fixes**

- Fix error (and repetitive logging) when Gateway Notification Channel is closed. This issue can happen when network communication between tthe Gloo and Gateway pods is interrupted. (https://github.com/solo-io/gloo/issues/2070)
- Wire in grpc web into gloo. (https://github.com/solo-io/gloo/issues/555)
- Update the delegation API to support delegating to multiple route tables. Route tables to delegate to can be selected by either namespaces, labels, or both, using the new `RouteTableSelector` field. The routes of all matching route tables will be merged and the resulting route set will be sorted by descending specificity of the matchers on each route, i.e. matchers with longer prefixes will appear first (delegated routes can only have prefix matchers). (https://github.com/solo-io/gloo/issues/2054)

### v1.3.1

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.12.1.

**New Features**

- Make Gloo fully compatible with go.mod, so that it can be run outside of the GOPATH. As a result of this all of the proto import paths needed to be stripped of the `github.com/solo-io` prefix, as that is no longer assured outside of the GOPATH. (https://github.com/solo-io/gloo/issues/835)

**Fixes**

- Wire in grpc web into gloo. (https://github.com/solo-io/gloo/issues/555)
- undo change to /docs/.gitignore which was failing to commit new generated docs, therefore producing broken links (https://github.com/solo-io/gloo/issues/2077)
- If we are searching for resources (e.g. upstreams) in a nonexistent namespace during `glooctl get`, we now return a helpful error. (https://github.com/solo-io/gloo/issues/1647)

### v1.3.0

**New Features**

- Add a new `auth_endpoint_query_params` field to the `AuthConfig` CRD. When using the Gloo Enterprise OAuth feature, this allows you to append additional query parameters to the request that Gloo sends to the OIDC authorization endpoint to initiate the authorization code flow. This can be useful to integrate Gloo with some identity providers that require custom parameters to be sent to the authorization endpoint.
The new field is a map, where each key-value pair will result in an additional query parameter:
```yaml apiVersion: enterprise.gloo.solo.io/v1 kind: AuthConfig metadata:
  name: google-oidc
  namespace: gloo-system
spec:
  configs:
  - oauth:
      app_url: http://localhost:8080
      callback_path: /callback
      client_id: $CLIENT_ID
      client_secret_ref:
        name: google
        namespace: gloo-system
      issuer_url: https://accounts.google.com
      auth_endpoint_query_params:
        key1 : value1
        key2 : value2
```
We also added a new `--auth-endpoint-query-params` flag to the `glooctl create authconfig` command; the flag takes in a comma-separated list of key value pairs (e.g. a=b,c=d). (https://github.com/solo-io/gloo/issues/2030)
- Allow users to specify which release version to install via glooctl with: `glooctl install gateway enterprise --version 0.20.6` or `glooctl install gateway --version 1.2.1` (https://github.com/solo-io/gloo/issues/1863)

### v1.2.14

Marked as a pre-release as it tracks the 1.3.x branch instead of the 1.2.x branch, and has some new features. 1.2.15 will be a patch release for any fixes since 1.2.12 (the `v1.2.x` branch)

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.11.7.

**New Features**

- Support Manual configuration of SSL for Knative Services. Using the annotations `gloo.networking.knative.dev/ssl.sni_domains` and `gloo.networking.knative.dev/ssl.secret_name`, users can manually configure Gloo to serve TLS for their Knative Services (https://github.com/solo-io/gloo/issues/2048)

### v1.2.13

*This release build failed.* (Helm charts failed to publish for this version)

Marked as a pre-release as it tracks the 1.3.x branch instead of the 1.2.x branch, and has some new features. 1.2.15 will be a patch release for any fixes since 1.2.12 (the `v1.2.x` branch)

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.11.5.

**Helm Changes**

- Ensure that all stats server settings are consistent across open source and enterprise Gloo by moving the enabled logic into a global helper template. This change introduces a global value that all deployments will use as their default stats server settings: `global.glooStats.enabled`. This value can be overridden by an individual deployment by setting a field on that deployment. For example, to disable stats on discovery, you can do `discovery.deployment.stats.enabled=false`. Note that this change has converted the `stats` field on our deployment objects from a boolean to an object with an `enabled` boolean field inside of it. (https://github.com/solo-io/gloo/issues/1884)

**New Features**

- Generate hash functions to improve CPU performance (https://github.com/solo-io/gloo/issues/1711)
- Reduce permissions needed to run glooctl in cluster by removing cross-namespace calls from install command. (https://github.com/solo-io/gloo/issues/1765)
- Add support for multiple envoy wasm filters, as well as specifying placement of said filters within the chain. (https://github.com/solo-io/gloo/issues/1956)
- Support Knative Ingress Class Annotations. If env var REQUIRE_INGRESS_CLASS=true on the Knative Ingress Controller, only ingresses with the annotation 'networking.knative.dev/ingress.class=gloo.ingress.networking.knative.dev' will be processed. Set Helm value Values.settings.integrations.knative.requireIngressClass=true to enable with Helm. (https://github.com/solo-io/gloo/issues/2040)

**Fixes**

- Don't error on install if gloo installation namespace already exists. (https://github.com/solo-io/gloo/issues/1988)
- Settings and Gateway resources currently get automatically created when the `gloo` and `gateway` pods (respectively) start up. This creates a race condition with our installation that we currently solve by creating our default Settings and Gateways as Helm Hook resources, which means that they are not managed as a part of the Helm release lifecycle. This is fixed by no longer creating those resources if they do not exist when the pods start up. (https://github.com/solo-io/gloo/issues/1828)

### v1.2.12

This release contained no user-facing changes.

### v1.2.11

*This release build failed.*

**New Features**

- Adds the ability to configure WebSocket upgrades on the HTTP Connection Manager and/or as part of a route's options. (https://github.com/solo-io/gloo/issues/1132)

**Fixes**

- `glooctl uninstall` now respects all the CLI options when Gloo was not installed via `glooctl install` or `helm install`. (https://github.com/solo-io/gloo/issues/1938)
- Don't attempt to reach the knative api server if the user is doing a dry-run installation. (https://github.com/solo-io/gloo/issues/1951)
- Remove `glooctl install gateway --upgrade` flag, since we have removed the v2 Gateway CRD. (https://github.com/solo-io/gloo/issues/1982)
- Make the code around upgrade configs more defensive (https://github.com/solo-io/gloo/issues/1979)

### v1.2.10

**Fixes**

- glooctl assumed a kube-based environment when checking for a client/Server version mismtach. When using Consul, this caused a delay in the glooctl command while the connection to kubernetes timed out and a kubernetes error message. The version check for non-kubernetes environments is now disabled. (https://github.com/solo-io/gloo/issues/1893)

### v1.2.9

*This release build failed.*

**Fixes**

- Bump envoy-wasm to resolve issue for loading non-empty config for remote WASM extensions. (https://github.com/solo-io/gloo/issues/1919)
- Add CRD resources back to the manifest files that are published as part of a Gloo release. (https://github.com/solo-io/gloo/issues/1877)

### v1.2.8

**New Features**

- Add preserve_external_request_id hcm setting (https://github.com/solo-io/gloo/issues/1875)
- Gloo now allows updating headers for direct responses. This includes the ability to copy request headers to the direct response via the `%REQ(header-name)%` format specifier. See [here](https://github.com/envoyproxy/envoy/pull/8782) for more information. (https://github.com/solo-io/gloo/issues/1912)

**Fixes**

- The Gateway controller now resyncs Proxy resources when Gloo sends a notification that an event occurred. This allows the Gateway to re-process its resources when a secondary resource such as a proxy or an upstream is modified. (https://github.com/solo-io/gloo/issues/1812)

### v1.2.7

**Fixes**

- Return an error from the validation server if ValidateProxy is called before the first Sync has happened (https://github.com/solo-io/gloo/issues/1873)

### v1.2.6

**New Features**

- Experimental support for envoy-wasm (https://github.com/solo-io/gloo/issues/1868)

### v1.2.5

**Dependency Bumps**

- envoy-gloo/solo-io has been upgraded to v0.1.19. This includes the security fixes introduced in upstream envoy 1.12.2.

**Fixes**

- AWS function discovery is more painful after our change to make FDS run in Whitelist mode by default. This changes FDS so that, in Whitelist mode, AWS functions are discovered as if FDS is running in Blacklist mode. (https://github.com/solo-io/gloo/issues/1878)
- By default, glooctl install will now attempt to create the namespace to install gloo into. This is a prerequisite for actually installing gloo, but can be turned off with the install flag --create-namespace=false. (https://github.com/solo-io/gloo/issues/1871)
- Previously, virtual service validation treated a virtual host with a domain of `""` (empty string) as having a domain of `"*"`. This then had the potential to conflict with virtual services that legitimately have a domain of `"*"`. Now we report an error from virtual service validation when a domain is the empty string. (https://github.com/solo-io/gloo/issues/1885)
- Output the glooctl version warning to stderr rather than stdout. Also, base the decision on whether or not to warn about a version mismatch solely on the versions of the open-source discovery containers that we find in the cluster. (https://github.com/solo-io/gloo/issues/1852)
- Use klog shim so that klog doesn't attempt to write files. (https://github.com/solo-io/gloo/issues/1039)

### v1.2.4

**Fixes**

- Readd version.EnterpriseTag for test overrides and future flag overrides. (https://github.com/solo-io/gloo/issues/1861)

### v1.2.3

**Fixes**

- Calculate the enterprise tag from the gloo-ee helm repo index file (https://storage.googleapis.com/gloo-ee-helm/index.yaml) instead of hardcoding it. (https://github.com/solo-io/gloo/issues/1831)
- Ensure that our usage of the Helm client libraries assigns a namespace to all resources, even those whose YAML definition does not specify a namespace. This is to fix the bug where observability resources can wind up in the default namespace set by the user's kube config; as of the time of writing, Prometheus's chart defines resources that are namespaced but do not have a namespace explicitly set on them. (https://github.com/solo-io/gloo/issues/1857)
- The recent `v1.2.0` release updated the Gloo chart to be compatible with Helm 3. This included moving the CRDs to the new dedicated `/crd` directory inside the chart. Helm 2 is not aware of this directory and hence will never render the CRDs. This fix adds back a CRD template file in the `templates` directory to make the chart backwards-compatible with Helm 2. (https://github.com/solo-io/gloo/issues/1835)
- We currently allow setting the `ttlSecondsAfterFinished` attribute on the `certgen` job via the `gateway.certGenJob.ttlSecondsAfterFinished` Helm value. Since this attribute was introduced with kubernetes 1.12, we here introduce a check in the Helm template to not render it if the version of kubernetes is less than 1.12. (https://github.com/solo-io/gloo/issues/1853)

### v1.2.2

*This release was canceled.*

**Fixes**

- Quick fix for regression on FDS with non-kube upstreams. (https://github.com/solo-io/gloo/issues/1844)

### v1.2.1

**Fixes**

- The template for the settings resource needs to be a Helm pre-install hook to prevent races during install. The hook annotation was accidentally removed with the `1.2.0` release; this change adds it back. (https://github.com/solo-io/gloo/issues/1838)

### v1.2.0

**Dependency Bumps**

- envoyproxy/go-control-plane has been upgraded to v0.9.0.
- knative/serving has been upgraded to v0.10.0.
- solo-io/go-utils has been upgraded to v0.11.0.
- solo-io/reporting-client has been upgraded to v0.1.2.
- k8s.io/api has been upgraded to kubernetes-1.16.2.
- k8s.io/client-go has been upgraded to kubernetes-1.16.2.
- k8s.io/kubectl has been upgraded to kubernetes-1.16.2.
- k8s.io/apimachinery has been upgraded to kubernetes-1.16.2.
- k8s.io/apiextensions-apiserver has been upgraded to kubernetes-1.16.2.
- k8s.io/apiserver has been upgraded to kubernetes-1.16.2.

**Helm Changes**

- Move `gatewayProxies.NAME.kind.deployment.antiAffinity` Helm value out into `gatewayProxies.NAME.antiAffinity`, since it can be applied to both DaemonSets and Deployments. (https://github.com/solo-io/gloo/issues/1775)
- Added `hook-delete-policy` to clean up the validation webhook certificate generation job after it has successfully completed. (https://github.com/solo-io/gloo/issues/1732)

**New Features**

- Gloo Validation now always rejects resources which fail to unmarshal, even when strict validation is disabled. (https://github.com/solo-io/gloo/issues/1795)
- The Gloo Helm chart is now compatible with [Helm 3](https://helm.sh/blog/helm-3-released/). (https://github.com/solo-io/gloo/issues/1732)
- Refactor `glooctl` to make it compatible with the new Helm 3 chart format. `glooctl` now uses the new Helm 3 libraries and delegates the `install` and `uninstall` operations to the corresponding Helm functions to provide consistent behavior across different installation flows; for example, it is now possible to install Gloo using `glooctl` and uninstall it using Helm, or vice-versa (https://github.com/solo-io/gloo/issues/1732)
- Deprecated the `installConfig.installationId` Helm value to track the resources that belong to a Gloo installation. Helm keeps track of resources by storing release information in a Kubernetes Secret in the namespace Gloo was installed in (this is the default with Helm 3 and can be changed via the `HELM_DRIVER` environment variable). `glooctl install` and `glooctl uninstall` now take the same approach (under the hood the two commands now delegate to their counterparts in the Helm 3 libraries). (https://github.com/solo-io/gloo/issues/1635)
- Helm users can now easily install Gloo in `ingress` or `knative` mode by using value overrides. The Gloo Helm chart now packages a single values file instead of creating variants for `ingress` and `knative`. The values specific to those two installation modes have been merged into the default `values.yaml`, where they will be ignored when those two features are disabled (which is the default). To produce the manifests specific to the `ingress` and `knative` installations, users can now just disable the gateway and enable the desired component via Helm value overrides. (https://github.com/solo-io/gloo/issues/1732)
- Add advanced rule priority options to Gloo Enterprise rate limit API, which will be supported in the next 1.x Gloo Enterprise release. (https://github.com/solo-io/gloo/issues/1724)
- Add `virtual_service_namespaces` configuration to the `HttpGateway`, which allows `HttpGateway`s to reference `VirtualService`s outside of their own namespace using the label selector. The default behavior, which remains unchanged, is to restrict gateways to referencing virtual services in their own namespace. (https://github.com/solo-io/gloo/issues/1695)

**Fixes**

- Fix a crash in Gloo that occurs when no kubeconfig is present
 (which is expected in non-Kubernetes environments). (https://github.com/solo-io/gloo/issues/1777)

### v1.1.0

**Helm Changes**

- Add the Helm field `extraEnvoyArgs` to .Values.gatewayProxies.gatewayProxy so users can add additional envoy command line arguments (e.g. --component-log-level "upstream:trace,misc:error", to set log levels for individual envoy components).  See the full list of Envoy command line args here - https://www.envoyproxy.io/docs/envoy/latest/operations/cli (https://github.com/solo-io/gloo/issues/1737)

**New Features**

- Bump default version of Knative Serving installed via glooctl install to 0.10.0 (https://github.com/solo-io/gloo/issues/1761)
- Add the Helm field `.Values.gatewayProxies.gatewayProxy.extraEnvoyArgs` so users can add additional envoy command line arguments (e.g. --set component-log-level="...", to set log levels for individual envoy components). See the full list of Envoy command line args here - https://www.envoyproxy.io/docs/envoy/latest/operations/cli (https://github.com/solo-io/gloo/issues/1737)
- Allow multiple value files to be passed in during installation, (e.g. `glooctl install gateway --dry-run --values file1.yaml,file2.yaml --values file3.yaml`). (https://github.com/solo-io/gloo/issues/1731)

### v0.21.3

**New Features**

- The default version of GlooE installed by the CLI is now 0.21.0. (https://github.com/solo-io/gloo/issues/1725)

### v0.21.2

**Helm Changes**

- Add `enabled` to `.Values.gateway.validation` and `.Values.gateway.certGenJob` so users can disable the features without setting the root resource to nil. (https://github.com/solo-io/gloo/issues/1561)
- Added Helm `settings.linkerd` chart value (https://github.com/solo-io/gloo/issues/1651)

**New Features**

- Glooctl will now print a warning if the version of the binary differs by either major or minor version from the Gloo server components. In the same message, it will also suggest a command to run to bring glooctl's version in line with the server version. (https://github.com/solo-io/gloo/issues/1513)

### v1.0.0

**Breaking Changes**

- Rename the Gateway field tcpGateway.destinations to tcpGateway.tcpHosts in order to eliminate the duplicated field names (i.e., tcpGateway.destinations[].destination) (https://github.com/solo-io/gloo/issues/1171)
- Remove deprecated v1 `Gateway` in favor of v2 `Gateway`; rename v2 gateway resources to v1. (https://github.com/solo-io/gloo/issues/1171)
- When a Gateway has an empty httpGateway.virtualServices ref list, include all virtual services in the same namespace as the gateway. Previously the behavior was to include all virtual services in the cluster, which is unfriendly to multi-tenant setups. (https://github.com/solo-io/gloo/issues/1142)
- Move the Helm values field "installConfig.installationId" to "global.glooInstallationId" in order to better facilitate usage of the Gloo sub-chart in Gloo Enterprise (https://github.com/solo-io/gloo/issues/1635)
- Remove some deprecated APIs:

1. Remove `CorsPolicy` from Gateway and Gloo `VirtualHost`, prefer setting `CorsPolicy` on `VirtualHostPlugins`.
2. Remove `name` from gateway `VirtualHost`, was previously ignored.
3. Remove `bind_addr` and `circuit_breakers` from `Settings`, prefer `gloo.xdsBindAddr` and `gloo.circuitBreakers` on same message. (https://github.com/solo-io/gloo/issues/1171)
- Rename all instances of `plugins` to `options` in Gloo's API. This prevents confusion as Gloo "plugins" is really an implementation detail for devs, and Gloo does not currently support dynamically-loaded plugins (aside from ExtAuth plugins).

Proto messages have been updated as such:

1. `VirtualHostPlugins` -> `VirtualHostOptions`
2. `RoutePlugins` -> `RouteOptions`
3. `WeightedDestinationPlugins` -> `WeightedDestinationOptions`
4. `ListenerPlugins` -> `ListenerOptions`
5. `HttpListenerPlugins` -> `HttpListenerOptions`
6. `TcpListenerPlugins` -> `TcpListenerOptions`

When referenced in yaml, each property is referenced as `options` under the appropriate containing resource. (https://github.com/solo-io/gloo/issues/1171)
- Update ExtAuth secret API to use strongly-typed configuration. OAuth and ApiKey secrets are no longer configured in the opaque `extensions` block, the same configuration lives at the top level in the `api_key` and `oauth` blocks. (https://github.com/solo-io/gloo/issues/1171)
- Refactor the Upstream API to remove the `upstreamSpec` field, bringing all the fields contained in `upstreamSpec` up one level to the top-level Upstream. (https://github.com/solo-io/gloo/issues/1171)

**Helm Changes**

- Add `enabled` to `.Values.gateway.validation` and `.Values.gateway.certGenJob` so users can disable the features without setting the root resource to nil. (https://github.com/solo-io/gloo/issues/1561)
- Allow the gateway certgen job to have a ttlSecondsAfterFinished set on it, defaulting to 60 seconds. A new Helm value "gateway.certGenJob.ttlSecondsAfterFinished" is provided to configure the value. This setting is currently in k8s Alpha (https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#ttl-mechanism-for-finished-jobs) so you may disable it entirely by setting "gateway.certGenJob.setTtlAfterFinished" to false. See https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/#feature-gates for information on the k8s feature flag corresponding to this setting ("TTLAfterFinished"). (https://github.com/solo-io/gloo/issues/1631)
- Add a Helm values field `gateway.readGatewaysFromAllNamespaces`. This new field defaults to false to preserve the old Gateway controller behavior, which is to read Gateway CRDs only from the namespace in which the controller is running. When the field is set to `true`, it will read Gateway CRDs from any of the watch namespaces. (https://github.com/solo-io/gloo/issues/1489)
- Move the Helm values field "installConfig.installationId" to "global.glooInstallationId" in order to better facilitate usage of the Gloo sub-chart in Gloo Enterprise (https://github.com/solo-io/gloo/issues/1635)
- knative helm charts use compareSemver (https://github.com/solo-io/gloo/pull/1623)

**New Features**

- The Gateway controller can now optionally process Gateway CRDs from anywhere in the watch namespaces, not just the namespace where the controller is running. The new setting controlling that can be found in the Gloo Settings object, at `gateway.readGatewaysFromAllNamespaces`. The value of this field can be configured at install time by setting the new Helm field `gateway.readGatewaysFromAllNamespaces` to your desired value; it defaults to false to preserve the old behavior. (https://github.com/solo-io/gloo/issues/1489)
- Adds the glooctl command "glooctl debug yaml". This command dumps a YAML manifest representing the current state of the Gloo installation running in the specified namespace. This is mainly used as a debug tool, and is not yet suitable for use as a Gloo backup tool; the dumped manifest contains resourceVersions, so you may be unable to do, for example, "glooctl debug yaml | kubectl apply -f -" if a resource has changed between the dump and the "kubectl apply". (https://github.com/solo-io/gloo/issues/1650)
- Glooctl will now print a warning if the version of the binary differs by either major or minor version from the Gloo server components. In the same message, it will also suggest a command to run to bring glooctl's version in line with the server version. (https://github.com/solo-io/gloo/issues/1513)
- Implement a utility to print snapshot content with the Secret content redacted (https://github.com/solo-io/gloo/issues/1679)
- Undeprecate `Extension`s (as configured on Gloo resources such as `Listener`s, `VirtualHost`s, `Route`s, etc.) and update documentation to explain its new purpose.

Extensions are now used for:

* controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata. Extensions will be passed along from Gateways, VirtualServices, and Route tables to the underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
* gRPC-based plugins which communicate with the Gloo translator out-of-process. Having extensions available enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API (https://github.com/solo-io/gloo/issues/1205)

**Fixes**

- Fix potential race where plugins may be called across translates invoked by the Validation server at the same time as the Translation sync. (https://github.com/solo-io/gloo/issues/1616)
- Use the installation ID set by Helm to ensure that glooctl uninstalls only resources created for the instance of Gloo being uninstalled. It does this by attempting to read the "installationId" label from the gloo pod. If the label is not found, the uninstall will fail. You can choose to proceed by passing the new --force flag to "glooctl uninstall", which will attempt to perform an uninstall that may inadvertently delete cluster-scoped resources belonging to some other installation of Gloo. (https://github.com/solo-io/gloo/issues/1593)
- Downgrade the log level from Error to Warn when gloo fails to report statistics (https://github.com/solo-io/gloo/issues/1633)
- **Security Fix**: Fix a bug where, when Gloo's logging level is set to Debug, we may inadvertently write the content of Secrets into the pod logs. We now print the same content into the logs, but with the Secret data redacted. (https://github.com/solo-io/gloo/issues/1679)

### v0.21.1

**Helm Changes**

- Allow the gateway certgen job to have a ttlSecondsAfterFinished set on it, defaulting to 60 seconds. A new Helm value "gateway.certGenJob.ttlSecondsAfterFinished" is provided to configure the value. This setting is currently in k8s Alpha (https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#ttl-mechanism-for-finished-jobs) so you may disable it entirely by setting "gateway.certGenJob.setTtlAfterFinished" to false. See https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/#feature-gates for information on the k8s feature flag corresponding to this setting ("TTLAfterFinished"). (https://github.com/solo-io/gloo/issues/1631)

**New Features**

- Adds the glooctl command "glooctl debug yaml". This command dumps a YAML manifest representing the current state of the Gloo installation running in the specified namespace. This is mainly used as a debug tool, and is not yet suitable for use as a Gloo backup tool; the dumped manifest contains resourceVersions, so you may be unable to do, for example, "glooctl debug yaml | kubectl apply -f -" if a resource has changed between the dump and the "kubectl apply". (https://github.com/solo-io/gloo/issues/1650)
- Implement a utility to print snapshot content with the Secret content redacted (https://github.com/solo-io/gloo/issues/1679)

**Fixes**

- Downgrade the log level from Error to Warn when gloo fails to report statistics (https://github.com/solo-io/gloo/issues/1633)
- **Security Fix**: Fix a bug where, when Gloo's logging level is set to Debug, we may inadvertently write the content of Secrets into the pod logs. We now print the same content into the logs, but with the Secret data redacted. (https://github.com/solo-io/gloo/issues/1679)

### v0.21.0

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.10.25.

**Breaking Changes**

- This release changes the names of Gloo's ClusterRoles. By default, cluster-scoped roles will have the namespace of the associated Gloo installation appended to their name (i.e., the cluster-scoped role "gloo-resource-reader" created along with a Gloo installation to the gloo-system namespace will now become "gloo-resource-reader-gloo-system"). This may cause a problem during upgrades from Gloo <0.21.0 to Gloo >=0.21.0 for both open-source and enterprise Gloo, as the role ref in a ClusterRoleBinding is immutable. To resolve this, you can delete the existing ClusterRoleBindings with "kubectl delete clusterrolebinding -l app=gloo" and they will be recreated correctly by the rest of the upgrade process. (https://github.com/solo-io/gloo/issues/1459)

**Helm Changes**

- At install time, set an installation ID on all resources. This ID is determined by using the value of the new Helm setting "installConfig.installationId", or selecting an ID at random if that setting is not provided. If providing your own installation ID, the value you provide must be a valid kubernetes label (refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set). (https://github.com/solo-io/gloo/issues/1589)
- Allow RBAC resource names to receive custom suffixes through the introduction of the new Helm setting "global.glooRbac.nameSuffix". This enables, for example, blue/green deployments of Gloo to different namespaces within the same cluster when using cluster-scoped RBAC resources. This change is backwards compatible. However, if you are performing an upgrade of Gloo from a version prior to this change and plan to use the new Helm value, then you may end up with duplicate RBAC resources in your cluster (e.g. Roles/RoleBindings with and without the suffix). If this is the case, the old resources (without the suffix) can be safely cleaned up. (https://github.com/solo-io/gloo/issues/1459)

**New Features**

- The default version of GlooE installed by the CLI is now 0.20.8. (https://github.com/solo-io/gloo/issues/1596)
- Support for Envoy's `forward_client_cert_details` and `set_current_client_cert_details` HTTP connection manager options (https://github.com/solo-io/gloo/issues/1577)

**Fixes**

- Use the installation ID set by Helm to ensure that glooctl uninstalls only resources created for the instance of Gloo being uninstalled. It does this by attempting to read the "installationId" label from the gloo pod. If the label is not found, the uninstall will fail. You can choose to proceed by passing the new --force flag to "glooctl uninstall", which will attempt to perform an uninstall that may inadvertently delete cluster-scoped resources belonging to some other installation of Gloo. (https://github.com/solo-io/gloo/issues/1593)
- Currently Gloo logs a warning each time it replaces an illegal character in the name of a Virtual Host. Change it to a debug level message to not flood the logs. (https://github.com/solo-io/gloo/issues/1604)

### v1.0.0-rc2

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.10.22.
- solo-io/go-utils has been upgraded to v0.10.25.
- solo-io/envoy-gloo has been upgraded to v0.1.18.
- solo-io/solo-kit has been upgraded to v0.11.7.

**Breaking Changes**

- Remove some deprecated APIs:

1. `weighed_destination_plugins` on `WeightedDestination`s, prefer `weighted_destination_plugins`
2. `gateway_proxy_name` on `Gateway`, prefer `proxy_names`
3. `role_arns` on `UpstreamSpec`, prefer `role_arn`
4. Extauth's `VhostExtension` and `RouteExtension`, among other minor removals. Prefer configuring Gloo Enterprise ExtAuth using `AuthConfig` Custom Resources, and configure Virtual Services via `ExtAuthExtension` to either reference these `AuthConfig`s or reference your own custom auth implementation using `CustomAuth`. (https://github.com/solo-io/gloo/issues/1171)

- This release changes the names of Gloo's ClusterRoles. By default, cluster-scoped roles will have the namespace of the associated Gloo installation appended to their name (i.e., the cluster-scoped role gloo-resource-reader created along with a Gloo installation to the gloo-system namespace will now become gloo-resource-reader-gloo-system). This may cause a problem during upgrades from Gloo <0.21.0 to Gloo >=0.21.0 for both open-source and enterprise Gloo, as the role ref in a ClusterRoleBinding is immutable. To resolve this, you can delete the existing ClusterRoleBindings with kubectl

**Helm Changes**

- At install time, set an installation ID on all resources. This ID is determined by using the value of the new Helm setting "installConfig.installationId", or selecting an ID at random if that setting is not provided. If providing your own installation ID, the value you provide must be a valid kubernetes label (refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set). (https://github.com/solo-io/gloo/issues/1589)
- Fix casing of helm value global.glooRbac.namespaced in the generated docs. The value global.glooRbac.namespaced has always been supported but we had been generating docs that have the value capitalized (global.glooRbac.Namespaced), incorrectly. (https://github.com/solo-io/gloo/issues/1569)
- Allow RBAC resource names to receive custom suffixes through the introduction of the new Helm setting "global.glooRbac.nameSuffix". This enables, for example, blue/green deployments of Gloo to different namespaces within the same cluster when using cluster-scoped RBAC resources. This change is backwards compatible. However, if you are performing an upgrade of Gloo from a version prior to this change and plan to use the new Helm value, then you may end up with duplicate RBAC resources in your cluster (e.g. Roles/RoleBindings with and without the suffix). If this is the case, the old resources (without the suffix) can be safely cleaned up. (https://github.com/solo-io/gloo/issues/1459)

**New Features**

- Add API for data loss prevention filter. (https://github.com/solo-io/gloo/issues/1500)
- Allow the gateway-proxy pod to optionally receive both init containers to run and extra volumes to define through helm (https://github.com/solo-io/gloo/issues/1537)
- Support for Envoy's `forward_client_cert_details` and `set_current_client_cert_details` HTTP connection manager options (https://github.com/solo-io/gloo/issues/1577)
- Add native generated Kubernetes types for Gloo config resources (https://github.com/solo-io/gloo/issues/1520)
- This change adds new features to the transformation API. It is now possible to define `Extractor`s which target the request/response body and use the resulting data in templates. You can decide whether to parse the body as JSON or as raw text; in the latter case extraction happens via regular expressions, in the former you will also be able to use all the templating capabilities. These have been augmented with three new template functions: `body()` will return the whole request body, `context()` will return the base JSON context (allowing for example to `range` on a JSON body that is an array), and `env(NAME)` will return the value of an environment variable with the given name. Finally, it is now possible to set [Dynamic Metadata](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata) using all the available extraction and templating features. You can now use this metadata to include any request/response property you like in the access logs (see the `DYNAMIC_METADATA` command operator [here](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log#command-operators)). (https://github.com/solo-io/gloo/issues/1546)
- Add `glooctl` commands to create and get `AuthConfig`s, and update `glooctl create vs` command to allow providing `AuthConfig` refs to configure extauth. (https://github.com/solo-io/gloo/issues/1171)

**Fixes**

- Update docs as part of fix to standard DLP SSN and credit card regexes to ignore boundary characters during regex match. This fixes potential issues where DLP masks characters outside the interesting part of the match, for example, the opening quote if the SSN/Credit Card is part of a JSON response. Before this fix, DLP would incorrectly transform this response into invalid JSON by masking the opening parenthesis. (https://github.com/solo-io/gloo/issues/1591)
- Make sure glooctl reports the same signature across multiple invocations (https://github.com/solo-io/gloo/issues/1559)
- Mute logging of kubernetes health check in gateway (https://github.com/solo-io/gloo/issues/1435)
- Currently Gloo logs a warning each time it replaces an illegal character in the name of a Virtual Host. Change it to a debug level message to not flood the logs. (https://github.com/solo-io/gloo/issues/1604)

### v0.20.13

**Fixes**

- Avoid panicking on routes without matchers when running `glooctl get vs`. (https://github.com/solo-io/gloo/issues/1563)
- Handle the `rate_limit_before_auth` setting in its deprecated location. We currently correctly handle the flag in its new location (`spec.ratelimit_server.rate_limit_before_auth`). (https://github.com/solo-io/gloo/issues/1572) but ignore it in the deprecated one (`spec.extensions.configs.rate-limit.rate_limit_before_auth`)

### v0.20.12

**Dependency Bumps**

- solo-io/envoy-gloo has been upgraded to v0.1.18.
- solo-io/solo-kit has been upgraded to v0.11.7.

**New Features**

- Allow the gateway-proxy pod to optionally receive both init containers to run and extra volumes to define through helm (https://github.com/solo-io/gloo/issues/1537)
- This change adds new features to the transformation API. It is now possible to define `Extractor`s which target the request/response body and use the resulting data in templates. You can decide whether to parse the body as JSON or as raw text; in the latter case extraction happens via regular expressions, in the former you will also be able to use all the templating capabilities. These have been augmented with three new template functions: `body()` will return the whole request body, `context()` will return the base JSON context (allowing for example to `range` on a JSON body that is an array), and `env(NAME)` will return the value of an environment variable with the given name. Finally, it is now possible to set [Dynamic Metadata](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata) using all the available extraction and templating features. You can now use this metadata to include any request/response property you like in the access logs (see the `DYNAMIC_METADATA` command operator [here](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log#command-operators)). (https://github.com/solo-io/gloo/issues/1546)

### v0.20.11

**New Features**

- The default version of GlooE installed by the CLI is now 0.20.6. (https://github.com/solo-io/gloo/issues/1386)

### v0.20.10

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.10.5.

**New Features**

- Add native generated Kubernetes types for Gloo config resources (https://github.com/solo-io/gloo/issues/)

### v1.0.0-rc1

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.11.2.
- solo-io/solo-kit has been upgraded to v0.11.0.
- solo-io/solo-kit has been upgraded to v0.11.5.
- solo-io/reporting-client has been upgraded to v0.1.0.

**Breaking Changes**

- Make FDS default to whitelist mode (https://github.com/solo-io/gloo/issues/1171)
- Flatten prefix rewrite and host rewrite APIs. Move `auto_host_rewrite` from static upstream to route plugins since it's a route-level Envoy config; this fixes confusing behavior where a single static upstream on a route sets `auto_host_rewrite` for the entire route. (https://github.com/solo-io/gloo/issues/1171)
- Add support for multiple matchers on a Gateway/Gloo Route to reduce user duplication in yaml/user code. Also allows users to omit matchers on routes (the `/` prefix matcher will be used) to allow all requests to match the route. (https://github.com/solo-io/gloo/issues/1171)
- Remove deprecated messages from rbac and jwt. (https://github.com/solo-io/gloo/issues/1171)
- Remove deprecated messages from waf. (https://github.com/solo-io/gloo/issues/1171)
- Remove the `glooctl --version` command in favor of `glooctl version` (https://github.com/solo-io/gloo/issues/1285)
- Update glooctl to write using the new strongly-typed API. (https://github.com/solo-io/gloo/issues/1171)

**New Features**

- Allow usage stats collection to be disabled at install time (https://github.com/solo-io/solo-projects/issues/1226)
- Introduce examples project for organizing resources associated with docs and tutorials. (https://github.com/solo-io/gloo/issues/1460)
- Add filter level support for matchers in transformation filter. (https://github.com/solo-io/envoy-gloo/issues/34)

**Fixes**

- Fix generated API field links in docs.solo.io/gloo/latest/. (https://github.com/solo-io/gloo/issues/1477)
- Make prefix_rewrite and host_rewrite nullable. (https://github.com/solo-io/gloo/issues/1373)

### v0.20.9

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.10.20.
- solo-io/solo-kit has been upgraded to v0.11.4.

**New Features**

- In order to enable routing directly to Kubernetes services (by using `KubernetesServiceDestinations`), Gloo currently scans the cluster for services and creates a special type of in-memory Upstream (via the `HybridUpstreamClient`). If the cluster contains a lot of services and the user does not take advantage of this feature, this results in unnecessary overhead. This change adds a new `disable_kubernetes_destinations` attribute to the `Settings` resource to allow disabling the feature. (https://github.com/solo-io/gloo/issues/1466)
- Support matching on headers that do NOT match the specified criteria. (https://github.com/solo-io/gloo/issues/1424)
- Add Enterprise API to allow for customization of waf intervention message. (https://github.com/solo-io/solo-projects/issues/1235)
- Allow running the rate limit filter before the auth filters. *NOTE* that, when this new setting is used, it will result in the loss of the extauth-aware rate limiting feature (ie, different rate limits for authenticated vs unauthenticated users) (https://github.com/solo-io/gloo/issues/1445)

**Fixes**

- Avoid panicking on routes without matchers. (https://github.com/solo-io/gloo/issues/1438)
- Fix controller pod crash when settings is missing (https://github.com/solo-io/gloo/issues/1498)
- Mute logging of kubernetes health check in gateway (https://github.com/solo-io/gloo/issues/1435)
- The Helm chart contained a `Role`/`ClusterRole` named `kube-crd-creator` which was unused. This role caused problems to users with limited privileges and effectively prevented them from installing Gloo in namespace-scoped mode. This fix removes the `kube-crd-creator` resource from the Helm chart. (https://github.com/solo-io/gloo/issues/1491)

### v0.20.8

**Fixes**

- Support setting external traffic policy on gateway proxy services via helm. (https://github.com/solo-io/gloo/issues/1410)

### v0.20.7

**New Features**

- Add support for custom authentication. You can now provide your own external authentication/authorization server and configure Gloo to call it on the virtual hosts, routes, and weighted destinations that you want to secure. (https://github.com/solo-io/gloo/issues/1396)
- The default version of GlooE installed by the CLI is now 0.20.4. (https://github.com/solo-io/gloo/issues/1386)
- Add support for users to provide their own Envoy grpc rate-limit server. (https://github.com/solo-io/gloo/issues/1398)

**Fixes**

- Glooctl no longer registers CRDs when performing read/write operations (https://github.com/solo-io/gloo/issues/1380)
- Fix nil pointer when validating nil proxy (https://github.com/solo-io/gloo/issues/1369)

### v0.20.6

**Fixes**

- fix nil pointer when validating nil proxy (https://github.com/solo-io/gloo/issues/1369)
- check resource hash in validator (prevents validating status updates) (https://github.com/solo-io/gloo/issues/1368)

### v0.20.5

**Fixes**

- Some boolean fields on Helm value structs have an `omitempty` json tag. This causes the JSON encoder to considered the whole struct empty in cases where we only the boolean field is set to false and might lead to unexpected behavior. (https://github.com/solo-io/gloo/issues/1360)
- Fix interface conversion panic on glooctl command to print route table for a virtual service (https://github.com/solo-io/gloo/issues/1350)

### v0.20.4

Updated to include envoy 1.11.2 and address CVE-2019-15225 and CVE-2019-15226.

**Dependency Bumps**

- solo-io/envoy-gloo has been upgraded to v0.1.17.

### v0.20.3

**New Features**

- The default version of GlooE installed by the CLI is now 0.20.1. (https://github.com/solo-io/gloo/issues/1272)
- Glooctl can now add routes to Route Tables (https://github.com/solo-io/gloo/issues/1320)
- Glooctl can now add delegate action routes (https://github.com/solo-io/gloo/issues/1319)
- Glooctl can now get/list Route Tables (https://github.com/solo-io/gloo/issues/1318)
- add ValidatingWebhook for Gateway resources (https://github.com/solo-io/gloo/pull/1234)

**Fixes**

- Gateway waits for Gloo validation server to become available during setup (https://github.com/solo-io/gloo/issues/1322)
- Fix panic on nil route matcher (https://github.com/solo-io/gloo/issues/1316)
- Fix issue where validation cannot be enabled via helm due to treatment of zero values (https://github.com/solo-io/gloo/issues/1314)

### v0.20.2

**New Features**

- Flatten enterprise RBAC config by removing useless 'config' nesting from new (not-yet documented/supported) strongly-typed API; deprecated opaque RBAC API unchanged and still supported. Also add ability to disable RBAC on vhosts in strongly-typed API (routes already supported in deprecated config) (https://github.com/solo-io/gloo/issues/1171)
- Flatten ratelimit config by creating v2 version of settings (https://github.com/solo-io/gloo/issues/1171)
- Flatten strongly-typed WAF config (https://github.com/solo-io/gloo/issues/1171)
- Gloo can now report warnings on resources for certain types of invalid configuration. (https://github.com/solo-io/gloo/issues/1290)

**Fixes**

- Better implementation to flatten ratelimit API; use more intuitive name for service settings rather than a v2 (https://github.com/solo-io/gloo/issues/1171)
- Fix issue where gloo validation server does not restart properly (https://github.com/solo-io/gloo/issues/1296)
- Add `weighted_destination_plugins` field to `WeightedDestination` object. The previous `weighed_destination_plugins` (no "t") has been deprecated and is still supported. (https://github.com/solo-io/gloo/issues/1307)
- Fix reporting on Route Tables (https://github.com/solo-io/gloo/issues/1291)

### v0.20.1

**Fixes**

- When deploying OS gloo with the admin console, use a known version for the chart that packages the read-only UI, which is versioned with enterprise Gloo, instead of looking for the current open source version. (https://github.com/solo-io/gloo/issues/1278)

### v0.20.0

**Breaking Changes**

- require parent route prefix to be present in delegated routes (https://github.com/solo-io/gloo/pull/1262)

**New Features**

- The default version of GlooE installed by the CLI is now 0.19.0. (https://github.com/solo-io/gloo/issues/1272)
- Update enterprise API to support strongly typed external auth configurations in settings, virtual hosts, routes, and weighted destinations. The current format based on opaque extensions has been deprecated but is still fully supported. (https://github.com/solo-io/gloo/issues/1171)

**Fixes**

- Remove the grafana and prometheus pods on uninstall (https://github.com/solo-io/solo-projects/issues/1157)

### v0.19.2

**New Features**

- Allow using IAM credentials with AWS Upstreams (https://github.com/solo-io/gloo/issues/680)
- Update enterprise API to have strongly-typed JWT & RBAC config; deprecated opaque extensions config still supported (https://github.com/solo-io/gloo/issues/1171)

**Fixes**

- Fix glooctl version output formatting. (https://github.com/solo-io/gloo/issues/1243)
- The grafana and prometheus pods are now installed to the correct gloo system namespace instead of default (https://github.com/solo-io/solo-projects/issues/1146)

### v0.19.1

**New Features**

- Allow the default gateways to be configurable through helm (https://github.com/solo-io/gloo/issues/1048)
- Option to install Gloo with a visual dashboard. (https://github.com/solo-io/gloo/issues/1218)
- Update enterprise API to have strongly-typed WAF config; deprecated opaque extensions WAF config still supported (https://github.com/solo-io/gloo/issues/1171)

**Fixes**

- Make sure that glooctl check catches all possible pod conditions (https://github.com/solo-io/solo-projects/issues/1121)

### v0.19.0

Marked as pre-release due to helm-chart publish issue.

**Dependency Bumps**

- solo-io/go-utils has been upgraded to v0.10.8.

**Breaking Changes**

- Update the external auth APIs to support configuring authentication/authorization on **routes and weighted destinations**, in addition to virtual hosts. The auth configuration that currently is defined directly on the virtual service/proxy resources (under virtualHostPlugins) will become a top-level solo-kit resource (in the context of Kubernetes this means **a new CRD**). Resources that need to use a particular auth configuration can now just reference the correspondent new `AuthConfig` resource. The advantages of this change are twofold: besides reducing the duplication of configuration, it guarantees the stability of secured upstreams between auth configuration updates. (https://github.com/solo-io/gloo/issues/1201)

**New Features**

- Add plugin to enable envoy health check filter (https://github.com/solo-io/gloo/pull/1230)
- Allow users to specify the kubernetes cluster name in `glooctl proxy url` and `glooctl proxy address` (https://github.com/solo-io/gloo/issues/1095)

**Fixes**

- Speed up the Helm tests. (https://github.com/solo-io/gloo/issues/1226)
- Gloo will not re-start it's XDS service when settings change (https://github.com/solo-io/gloo/issues/1191)
- Gloo will optionally wait for EDS to be ready before continuing (https://github.com/solo-io/gloo/issues/1191)

### v0.18.44

**New Features**

- Add glooctl debug log command, which prints out all the gloo pod logs. A --zip flag will save them in a tar file (location optionally specified by the --file flag). A --errors-only flag will filter the logs for 'error' level logs. (https://github.com/solo-io/gloo/issues/997)

**Fixes**

- fix ratelimit setting propagation with new config location (https://github.com/solo-io/gloo/issues/1209)
- Fix upstream status write status error from hybrid client, and generation hash mismatch. (https://github.com/solo-io/gloo/issues/1212)

### v0.18.43

**New Features**

- Ability to specify non-standard kube config from glooctl. (https://github.com/solo-io/gloo/issues/1094)
- Move rate-limit API from opaque `extensions` to strongly-typed `enterprise` tag and deprecate old api (https://github.com/solo-io/gloo/issues/1171)
- add gloo and gateway configuration options to settings (https://github.com/solo-io/gloo/pull/1145)
- add detailed proxy validation to gloo translator (https://github.com/solo-io/gloo/pull/1165)
- add proxy validation server to gloo (https://github.com/solo-io/gloo/pull/1166)

**Fixes**

- fix prepending of route prefixes when the prefix is a / (https://github.com/solo-io/gloo/pull/1178)
- Allow you to skip choosing a function when adding routes interactively. (https://github.com/solo-io/gloo/issues/470)

### v0.18.42

**New Features**

- Allow container user ids to be dynamically set by the cluster (https://github.com/solo-io/customers/issues/5)
- Modify glooctl version command to output both client and server versions (https://github.com/solo-io/gloo/issues/722)
- Add support for add route query parameter matching. (https://github.com/solo-io/gloo/issues/932)

**Fixes**

- Add back the virtualservice create consul related flags. (https://github.com/solo-io/gloo/issues/1172)
- If we run glooctl uninstall -all with a nonexistent namespace, still uninstall everything instead of erroring out. (https://github.com/solo-io/gloo/issues/602)
- For both glooctl add and glooctl create, a --dry-run will output a kube-yaml file unless the --output flag overrides it. (https://github.com/solo-io/gloo/issues/907)

### v0.18.41

**New Features**

- add route metadata with owner reference to gloo routes (https://github.com/solo-io/gloo/pull/1139)

### v0.18.40

**Fixes**

- Fix apiserver RBAC - allow listing setting. (https://github.com/solo-io/gloo/issues/1156)

### v0.18.39

**Fixes**

- Fix apiserver intialization restart race condition. (https://github.com/solo-io/gloo/pull/1149)
- Clarify that UI is read-only, non-enterprise version. (https://github.com/solo-io/gloo/pull/1146)
- Fix apiserver so that UI can show Envoy details without requiring access to the admin port. (https://github.com/solo-io/gloo/issues/1125)
- fix issue where the las TLS secret overrides the others when multiple TLS secrets are provided (kubernetes Ingress) (https://github.com/solo-io/gloo/pull/1151)

### v0.18.38

**New Features**

- Add support for GRPC access log streaming (https://github.com/solo-io/gloo/issues/1046)
- Use secret converter in glooctl to flatten aws secrets and write proper tls secrets. (https://github.com/solo-io/gloo/issues/1138)
- implement virtualservice selector (https://github.com/solo-io/gloo/pull/1143)

**Fixes**

- Regenerate the protobuf code. (https://github.com/solo-io/gloo/issues/1147)

### v0.18.37

**Fixes**

- Add Make target to verify that generated enterprise API files are valid. This is just a first patch and does not completely solve the issue, as it requires manually adding packages that have to be verified to the verification script; if we forget to make this update, invalid files might still be released. (https://github.com/solo-io/gloo/issues/1134)

### v0.18.36

**This release has been downgraded to a pre-release due to regressions.**

**New Features**

- Add support for envoy health checks (https://github.com/solo-io/gloo/issues/1113)

### v0.18.35

**New Features**

- Add LDAP connection pool setting to Ext Auth API. (https://github.com/solo-io/gloo/issues/1128)

### v0.18.34

**New Features**

- support multiple proxy names on gateway (https://github.com/solo-io/gloo/pull/1116)
- Enable delegate routing & use of RouteTable Resource in Gateway (https://github.com/solo-io/gloo/pull/1120)

**Fixes**

- fix install race condition with helm pre-install hook (https://github.com/solo-io/gloo/pull/1122)

### v0.18.33

*This release contained a mistaken API break, reverted in v0.18.34*

**New Features**

- Provide optional read-only UI with Gloo deployment. (https://github.com/solo-io/gloo/pull/1109)

### v0.18.32

**New Features**

- Add api for delegate routing (https://github.com/solo-io/gloo/pull/1111)
- Allow explicitly enabling or disabling auto-rewrite for upstreams. (https://github.com/solo-io/gloo/issues/1118)

### v0.18.31

**Dependency Bumps**

- solo-io/envoy-gloo has been upgraded to v0.1.14.

### v0.18.30

**Dependency Bumps**

- solo-io/envoy-gloo has been upgraded to v0.1.13.

### v0.18.29

**Dependency Bumps**

- solo-io/solo-kit has been upgraded to v0.10.14.

**Fixes**

- consul client respects namespace (https://github.com/solo-io/gloo/pull/1101)

### v0.18.28

*This release build failed.*

**New Features**

- Support transformations on UpstreamGroup, multi destination, and vhosts. (https://github.com/solo-io/gloo/pull/1097)

### v0.18.27

*This release build failed.*

*This release build failed.*

This release contained no user-facing changes.

### v0.18.26

**Fixes**

- Fix confusing and bug prone helm render bug by wrapping render and undoing chart side-effects (https://github.com/solo-io/gloo/issues/1092)

### v0.18.25

**New Features**

- Add http listener level extensions in Gateway. (https://github.com/solo-io/gloo/issues/1055)

**Fixes**

- Fix rendering of DaemonSet (https://github.com/solo-io/gloo/issues/1087)
- Assign a service account name to the gateway conversion job. (https://github.com/solo-io/gloo/issues/1085)

### v0.18.24

**New Features**

- Enable random sampling for tracing. (https://github.com/solo-io/gloo/pull/1081)

